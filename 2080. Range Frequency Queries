//Optimal Solution using Hashing
class RangeFreqQuery {
public:
//Time Complexity O(n + q*log(n)) q=number of queries, n=number of elements in vector arr
    unordered_map<int,vector<int>> mp;
    RangeFreqQuery(vector<int>& arr) {
        for(int i=0;i<arr.size();i++){
            mp[arr[i]].push_back(i);
        }
    }
    
    int query(int left, int right, int val) {
        vector<int>& v=mp[val];
        int p1=lower_bound(v.begin(),v.end(),left) - v.begin();
        int p2=upper_bound(v.begin(),v.end(),right) - v.begin();
        int ans=p2-p1;
        return ans;
    }
};

//Brute force SOlutionclass RangeFreqQuery {
public:
//Time Complexity O(q*n) q=number of queries
    vector<int> v;
    RangeFreqQuery(vector<int>& arr) {
        v=arr;
    }
    
    int query(int left, int right, int val) {
        int ans=0;
        for(int i=left;i<=right;i++){
            if(v[i]==val) ans++;
        }
        return ans;
    }
};
